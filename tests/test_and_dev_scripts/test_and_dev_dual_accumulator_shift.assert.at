
# test and dev model dual_accumulator_shift.assert


AT_SETUP([dual_accumulator_shift.assert: tricommand])
AT_SKIP_IF([test ! -x $TEST_AND_DEV/dual_accumulator_shift.assert/tricommand])
AT_CHECK([(cd $TEST_AND_DEV/dual_accumulator_shift.assert && ulimit -v ${GMTK_MEMLIMT-8000000} && ulimit -t ${GMTK_TIMELIMIT-120} && ./tricommand)], [], [ignore], [ignore])
AT_CLEANUP

AT_SETUP([dual_accumulator_shift.assert: infocommand])
AT_SKIP_IF([test ! -x $TEST_AND_DEV/dual_accumulator_shift.assert/infocommand])
AT_CHECK([(cd $TEST_AND_DEV/dual_accumulator_shift.assert && ulimit -v ${GMTK_MEMLIMT-8000000} && ulimit -t ${GMTK_TIMELIMIT-120} && ./infocommand)], [], [ignore], [ignore])
AT_CLEANUP

AT_SETUP([dual_accumulator_shift.assert: traincommand])
AT_SKIP_IF([test ! -x $TEST_AND_DEV/dual_accumulator_shift.assert/traincommand])
# https://j.ee.washington.edu/trac/gmtk/ticket/68
AT_XFAIL_IF([test x"$GMTK_NOXFAIL" = x""])
AT_CHECK([(cd $TEST_AND_DEV/dual_accumulator_shift.assert && ulimit -v ${GMTK_MEMLIMT-8000000} && ulimit -t ${GMTK_TIMELIMIT-120} && ./traincommand)], [], [ignore], [ignore])
AT_CLEANUP

AT_SETUP([dual_accumulator_shift.assert: jtcommand])
AT_SKIP_IF([test ! -x $TEST_AND_DEV/dual_accumulator_shift.assert/jtcommand])
# jtcommand wants the trained parameters the above failed to produce
AT_SKIP_IF([test ! -f $TEST_AND_DEV/dual_accumulator_shift.assert/trained.params])
AT_CHECK([(cd $TEST_AND_DEV/dual_accumulator_shift.assert && ulimit -v ${GMTK_MEMLIMT-8000000} && ulimit -t ${GMTK_TIMELIMIT-120} && ./jtcommand)], [], [ignore], [ignore])
AT_CLEANUP
