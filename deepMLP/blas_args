
# We need dgemm, which can come from PHiPAC or CBLAS.
# PHiPAC is "built-in" to GMTK, so it is always avaialable. 
# A well-tuned CBLAS dgemm might be faster.

AC_ARG_ENABLE([internal-dgemm],
   [AS_HELP_STRING([--enable-internal-dgemm], [use internal CBLAS matrix multiply])])

# If the user gives --enable-internal-dgemm, $enable_internal_dgemm will be "yes"
#    and we should AC_DEFINE(USE_PHIPAC) and build libPHiPAC.a.

# If the user gives --disable-internal-dgemm, $enable_internal_dgemm will be "no"
#    and we should not build libPHiPAC.a. In this case, the user (or pkg-config) must 
#    supply a CBLAS to link with.

# If the user gives neither, the the default is to use PHiPAC if they don't
#    specify a CBLAS or MKL. Otherwise, the CBLAS or MKL dgemm will be used.



# We need a CBLAS. ATLAS or Goto are nice. OpenBLAS is based on Goto. MKL also 
# provides CBLAS. ACML seems pretty fast on Opterons, though you have to build the
# Netlib CBLAS for it yourself. See http://www.netlib.org/blas/blast-forum/cblas.tgz

# We can also make use of some VML and MKL routines, so we AC_DEFINE(HAVE_MKL)
# if the user tells us where to find MKL. We'll also use MKL's CBLAS. If the user
# gives --with-mkl, we'll use the MKL CBLAS dgemm unless the user also explicitly
# gives --enable-internal-dgemm.

AC_ARG_WITH([mkl],
   [AS_HELP_STRING([--with-mkl=<dir>], [use MKL installation in <dir> for CBLAS, VML, and MKL routines])],
   [MKLROOT=$with_mkl])
# Just setting $MKLROOT might also work

# MKL has several threading options. Default is intel_thread
AC_ARG_WITH([mkl-thread],
   [AS_HELP_STRING([--with-mkl-thread=<thread>], 
     [use MKL threading library <thread> (sequential, intel_thread, gnu_thread) @<:@sequential@:>@])],
   [case $with_mkl_thread in
      intel_thread | sequential | gnu_thread) ;;
      *) AC_MSG_ERROR([Unknown MKL threading layer: $with_mkl_thread (must be one of sequential, intel_thread, gnu_thread)]) ;;
    esac],
   [with_mkl_thread=sequential])


# 32- or 64-bit CPU, default 64-bit
AC_ARG_WITH([mkl-architecture],
  [AS_HELP_STRING([--with-mkl-architecture], [CPU architecture (ia32 or intel64) @<:@intel64@:>@])],
  [case $with_mkl_architecture in
     ia32 | intel64) ;;
     *) AC_MSG_ERROR([Unknown MKL architecture: $with_mkl_architecture (must be ia32 or intel64)]) ;;
   esac],
  [with_mkl_architecture=intel64])


# If we don't have MKL, we need a plain external CBLAS (and we'll use internal 
# replacement MKL kernels, and not use VML). If we don't get either MKL or a 
# plain CBLAS, we'll use the PHiPAC dgemm, internal replacement MKL and BLAS
# level 1 kernels, and no VML.


# By default, we'll try to use a CBLAS located either by pkg-config
# or in your default build search paths. You can specify
#   --with-cblas-cflags=-I<dir> 
#   --with-cblas-libs=-L<dir> -l<library>
# if you want to use a particular CBLAS. If you don't specify any
# of the above, we will try pkg-config cblas to locate the CBLAS.
# If the --with-cblas-* weren't specified and pkg-config fails to 
# find a CBLAS, we just guess -I/usr/include -L/usr/lib -lcblas
#
# If none of the above works, use the internal replacements...
#
# If you prefer to use MKL instead of a CBLAS, see --with-mkl

AC_ARG_WITH([cblas-cflags],
   [AS_HELP_STRING([--with-cblas-cflags=-I<dir>], [cpp -I flags to find non-MKL CBLAS includes @<:@-I/usr/include@:>@])],
   [AS_IF([test "x$with_cblas_cflags" != "xno"], 
     [BLAS_CFLAGS=$with_cblas_cflags ; BLAS_REQUEST=yes], 
     [BLAS_REQUEST=no])],
   [BLAS_CFLAGS=""])
# assume -I/usr/include is already included in the include seach path  

AC_ARG_WITH([cblas-libs],
   [AS_HELP_STRING([--with-cblas-libs=-l<library>], [ld -L and -l flags to link with non-MKL CBLAS library @<:@-lcblas@:>@])],
   [AS_IF([test "x$with_cblas_libs" != "xno"], 
     [BLAS_LIBS=$with_cblas_libs ; BLAS_REQUEST=yes], 
     [BLAS_REQUEST=no])],
   [BLAS_LIBS=""])
# assume libcblas.* is what we want

# BLAS_REQUEST=yes signals that the user requested a specific CBLAS 
# by using one of the --with-cblas-* arguments, so use that instead 
# of trying pkg-config. BLAS_REQUEST=no signals the user gave a
# --without-cblas-* argument, so don't try to find any external CBLAS
# (note that if they gave --with-mkl, it will still use MKL as a BLAS).


# Just here to add top-level --help for pkg-config
m4_include([m4/pkg.m4])
PKG_PROG_PKG_CONFIG()
if false; then
  PKG_CHECK_MODULES([BLAS],[cblas])
fi
