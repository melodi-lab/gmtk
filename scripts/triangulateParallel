#!/usr/nikola/bin/perl -w 

use strict;
use Getopt::Long;

my $valid_options; 
my $str_file; 
my $any_time_triangulate, 
my $boundary_any_time; 
my $triangulate_any_time; 
my $other_arguments; 
my $total_seconds;
my $boundary_seconds;
my $triangulate_seconds;
my $triangulate_line;
my $gmtk_triangulate;
my $gmtk_tfmerge;
my $output;
my $pmae;

##############################################################################
# GMTK tool names
# -Do not add paths to these definitons, alter your path instead
##############################################################################
$gmtk_triangulate = 'gmtkTriangulate'; 
$gmtk_tfmerge     = 'gmtkTFmerge'; 
$pmae             = 'pmae'; 

##############################################################################
# Get command line parameters 
##############################################################################
$valid_options = &GetOptions( 
  "strFile:s"            => \$str_file, 
  "anyTimeTriangulate:s" => \$any_time_triangulate, 
  "boundaryAnyTime:s"    => \$boundary_any_time, 
  "triangulateAnyTime:s" => \$triangulate_any_time,
  "other:s"              => \$other_arguments
 );

##########################################################################
# Process command line parameters
##########################################################################
if (!defined $str_file) { 
  print "***ERROR:  Must supply a structure file name\n";
  $valid_options = 0;
}
else {
  (-e $str_file) or die "***ERROR:  '$str_file' does not exist\n";
}

if ((defined $any_time_triangulate) &&
    (!defined $boundary_any_time)   && 
    (!defined $triangulate_any_time)) 
{
  $total_seconds       = get_seconds($any_time_triangulate);
  $boundary_seconds    = int($total_seconds*0.2 + .5);
  $triangulate_seconds = $total_seconds - $boundary_seconds; 
}
elsif ((!defined $any_time_triangulate) &&
       (defined $boundary_any_time)     && 
       (defined $triangulate_any_time)) 
{ 
  $boundary_seconds    = get_seconds($boundary_any_time);
  $triangulate_seconds = get_seconds($triangulate_any_time);
}
elsif ((!defined $any_time_triangulate) &&
       (!defined $boundary_any_time)    && 
       (!defined $triangulate_any_time)) 
{
  $boundary_seconds    = 20; 
  $triangulate_seconds = 60; 
}
else 
{
  print "***ERROR:  Must give -anyTimeTriangulate or both -boundaryAnyTime and\n"; 
  print "           -triangulateAnyTime\n";
  $valid_options = 0;
}

if (!$valid_options) 
{
  print "Structure file name is required, make sure gmtkTriangulate, gmtkTRmerge, and\n";
  print "  pmae are in the path.\n";
  print "      -strFile             Structure file name\n";
  print "      -anyTimeTriangulate  Total boundary/triangulate time\n";
  print "      -boundaryAnyTime     Boundary search time\n";
  print "      -triangulateAnyTime  Triangulation search time\n";
  print "      -other               Other arguments to gmtkTriangulate\n";
  die "\n";
}

if (!defined $other_arguments)
{
  $other_arguments = ' ';
}

#############################################################################
# Export process to find best boundary 
#############################################################################
print "Finding best boundary (maximum of $boundary_seconds seconds after export)...\n";

`echo \'$gmtk_triangulate -strFile $str_file -rePartition T -reTriangulate T -findBestBoundary T -outputTriangulatedFile $str_file.partition -triangulationHeuristic completed -findBestBoundary T -boundaryHeuristic W -M 1 -S 1 -seed T -anyTimeTriangulate $boundary_seconds -jtWeight T $other_arguments \' | $pmae | pmake -f- 1>&2`; 

#############################################################################
# Export processes to triangulate P, C, and E 
#############################################################################
print "Triangulating (maximum of $triangulate_seconds seconds after export)...\n";

$triangulate_line = "$gmtk_triangulate -strFile $str_file -rePartition F -reTriangulate T -findBestBoundary F -inputTriangulatedFile $str_file.partition -findBestBoundary F -seed T -anyTimeTriangulate $triangulate_seconds -jtWeight T $other_arguments";

`echo \'$triangulate_line -outputTriangulatedFile $str_file.P -noReTriP F -noReTriC T -noReTriE T\n $triangulate_line -outputTriangulatedFile $str_file.C -noReTriP T -noReTriC F -noReTriE T\n $triangulate_line -outputTriangulatedFile $str_file.E -noReTriP T -noReTriC T -noReTriE F\n\' | $pmae | pmake -f- 1>&2`; 

#############################################################################
# Merge trifiles (using local processor) 
#############################################################################
print "Merging trifiles...\n";

`$gmtk_tfmerge -strFile $str_file -outputTriangulatedFile $str_file.trifile -Ptrifile $str_file.P -Ctrifile $str_file.C -Etrifile $str_file.E 1>&2`; 


#############################################################################
# get_seconds(timestring)
#
# The input is a time string specifying:  seconds, minutes, hours, days, 
#    weeks.  Examples: 
#    '3 seconds 4 minutes 1 hour'  
#    '4min 1 hour 2 days'  
#    '1w3s1h'  
#
# Output is the integer number of seconds represented by the string.
#############################################################################
sub get_seconds 
{
  my $time_string;
  my @strings;
  my $total;
  my $string;
  my $numbers;
  my $letters;
  my $scnds;
  
  $time_string = pop;

  (@strings) = split /(\d+\s*\w+)/, $time_string;

  $total = 0;

  foreach $string (@strings)
  {
    ($numbers, $letters) = $string =~ /(\d+)\s*(\w+)/;

    if ((defined $letters) && (defined $numbers) &&  
        ('seconds' =~ /$letters/)) {
      $total = $total + $numbers;
    }
    elsif ((defined $letters) && (defined $numbers) &&  
           ('minutes' =~ /$letters/)) {
      $total = $total + 60*$numbers;
    }
    elsif ((defined $letters) && (defined $numbers) &&  
           ('hours' =~ /$letters/)) {
      $total = $total + 60*60*$numbers;
    }
    elsif ((defined $letters) && (defined $numbers) &&  
           ('days' =~ /$letters/)) {
      $total = $total + 24*60*60*$numbers;
    }
    elsif ((defined $letters) && (defined $numbers) &&  
           ('weeks' =~ /$letters/)) {
      $total = $total + 7*24*60*60*$numbers;
    }
  }

  return $total;
}


