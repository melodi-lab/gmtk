#!/usr/nikola/bin/perl -w

use Cwd;

##############################################################################
# Process command line arguement 
##############################################################################
if ((scalar @ARGV) == 0) {
  $tag = 0;
}
elsif ($ARGV[0] eq 'print') {
  $tag = 0;
}
elsif ($ARGV[0] eq 'tag') {
  $tag = 1;
}
else { 
  die "Usage:  update_development [mode]\n   print, print needed action and exit\n   tag,   move the development tag on all files with newer revisions\n"; 
}

##############################################################################
# Get the CVS root directory 
##############################################################################
open CVS_ROOT, "<CVS/Root" or die "***ERROR:  This does not appear to be a valid CVS repository\n";
$CVS_root = <CVS_ROOT>;
close CVS_ROOT;
chomp $CVS_root;

##############################################################################
# Find files which have been modified
##############################################################################
@total_diff = grep /^Index: \S+$/, `cvs diff 2>&1`;

foreach $line (@total_diff)
{
  ($file_name) = $line =~ /^Index: (\S+)$/;
  push @modified, $file_name;  
}

##############################################################################
# Compare current revision number of each file with the development tag
##############################################################################
@status = split /===================================================================/, `cvs status -vR 2>&1`; 

for($i=1; $i<(scalar @status); $i++)
{
  ######################################################################
  # Get lists containing revision numbers
  #####################################################################
  ($file)    = $status[$i] =~ /File: (\S+)\s/; 
  ($working) = $status[$i] =~ /Working revision:\s+([.0-9]+)\s/; 
  ($development) = $status[$i] =~ /development\s+\(\S+: ([.0-9]+)/; 

  ($module) = Cwd::cwd() =~ /\/([^\/]+)\/*$/;
  ($submodule) = $status[$i] =~ /Repository revision:\s+[.0-9]+\s+${CVS_root}\/*${module}\/*(.*)\/+$file,v/; 
  if ((!defined $submodule) || ($submodule eq '')) {
    $submodule = '.';
  }

  ######################################################################
  # Check if development tag exists 
  #####################################################################
  if (!defined $development) {
    push @need_tag, "$submodule/$file";
  }
  else {
    @development = split /\./, $development; 
    @working     = split /\./, $working; 

    ######################################################################
    # Compare, starting with most significant portion of revision number 
    #####################################################################
    $found_change = 0;
    for($j=0; 
        ($j<(scalar @working) && $j<(scalar @development) && (!$found_change)); 
        $j++) {

      if ($working[$j] < $development[$j]) {
        push @outdated, "$submodule/$file";
        $found_change = 1;
      }
      elsif ($working[$j] > $development[$j]) {
        push @need_tag, "$submodule/$file";
        $found_change = 1;
      }
    }

    ######################################################################
    # If one revision numbers has more digits, consider the longer number
    # as the oldest
    #####################################################################
    if (!$found_change) {
      if ((scalar @working) < (scalar @development)) {
        push @outdated, $file;
      }
      elsif ((scalar @working) > (scalar @development)) {
        push @need_tag, "$submodule/$file";
      }
    }
  }

}

##############################################################################
# Display modified files and prompt user
##############################################################################
if ((scalar @modified) > 0) {
  print "*** Warning, the following files have been modified:\n";
  foreach $file (@modified) {
    print "   $file\n";
  }

  if ($tag) {
    do {
      print "Do you want to continue (yes/no)? ";
      $ignore = <STDIN>;
      chomp($ignore);
    } while (($ignore ne 'yes')&&($ignore ne 'no'));

    if ($ignore eq 'no') {
      exit 1;
    }
  }
}

##############################################################################
# Display outdated files and prompt user
##############################################################################
if ((scalar @outdated) > 0) {
  print "*** Warning, the following files are older than the development tag:\n";
  foreach $file (@outdated) {
    print "   $file\n";
  }

  if ($tag) {
    do {
      print "Do you want to continue (yes/no)? ";
      $ignore = <STDIN>;
      chomp($ignore);
    } while (($ignore ne 'yes')&&($ignore ne 'no'));

    if ($ignore eq 'no') {
      exit 1;
    }
  }
}

##############################################################################
# Tag the files 
##############################################################################
if (!$tag) {
  print "Files to be tagged:\n";
}

if ((scalar @need_tag) == 0) {
  print "   (none)\n";
}

foreach $file (@need_tag) {
  if ($tag) {
    print `cvs tag -F development $file\n`;
  }
  else {
    print "   $file\n";
  }
}

